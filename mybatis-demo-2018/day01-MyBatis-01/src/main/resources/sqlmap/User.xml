<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespace命名空间，作用就是对sql进行分类化管理，理解为sql隔离
	注意：！！使用mapper代理方法开发，namespace必须和Mapper代理接口的全限定名称一致
 -->
<mapper namespace="test">
	<!-- 在映射文件中配置多条sql语句 -->
	<!-- 
		通过select标签执行数据库查询
		id属性：标识映射文件中的sql
			将sql语句封装到mappedStatement对象中，将id称为mappedStatement的id
		parameterType属性：指定输入参数的类型，例子是Long类型
		resultType属性：指定sql输出结果的所映射的java对象类型
						select指定resultType表示单条记录映射成的java对象
		
		在sql语句中，#{}表示一个占位符号
		#{id}:其中的id表示接收输入的参数，参数名称就是“id”，
				如果输入参数是基本数据类型，#{}中的参数名可以是任意，可以是value或者其它名称
	 -->
	<select id="findUserById" parameterType="int" resultType="com.moon.entity.User">
		select * from `user` where id=#{id}
	</select>
	
	<!-- 模糊查询，可能返回多个结果
		resultType属性：表示单条记录映射成的java对象，就算返回是集合，但集合中存放还是自定义类型
		
		${}：表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中
			使用${}拼接sql，会引起sql注入问题【不安全，不建议使用】
		${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.moon.entity.User">
		<!-- where username like '%小明%',说明：
			字符串拼接符：${value},处理参数
		-->
		<!-- select * from `user` where username like '%${value}%' -->
		<!-- 对应方法需要传参数为"%小明%" -->
		select * from `user` where username like #{username}
	</select>
	
	<!-- 添加功能<insert>标签
		parameterType属性：在添加功能中指定输入类型是实体类
		#{}中指定实体的属性名，接收到实体类对象的属性值，MyBatis是通过OGNL获取对象的属性值
			！占位符，当参数传递的是entity的时候，花括号中的内容是pojo的属性
	 -->
	<insert id="insertUser" parameterType="com.moon.entity.User">
		<!-- 将插入数据的主键返回，返回到User对象中
			select LAST_INSERT_ID()：得到刚刚insert操作添加的记录的主键，只适用与自增主键 
			
			keyColumn属性：主键字段名（表）
			keyProperty属性：将查询到主键值设置到parameterType指定的对象的哪一个属性中
			order属性：指定select LAST_INSERT_ID()执行顺序，相对于insert语句来说的执行顺序
				BEFORE：在insert语句执行之前；
				AFTER：在insert语句执行之后；
			resultType属性：指定select LAST_INSERT_ID()的结果类型
			
				oracle数据库中使用BEFORE:
		 				<selectKey keyColumn="id" keyProperty="id" resultType="int" order="BEFORE">
			 	 	 	select seq.nextVal from dual;
			 	 	 </selectKey>
			 	 	insert into `user`(id,username,birthday,sex,address) 
			 	 	values(#{id},#{username},#{birthday},#{sex},#{address})
		 -->
		 <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
		 	select LAST_INSERT_ID()
		 </selectKey>
		insert into user(username,birthday,address) values(#{username},#{birthday},#{address})
	</insert>
	
	<!-- 定义主键的方式2 
		useGeneratedKeys="true",使用数据库的主键生成策略，默认值是true
		keyColumn：主键字段（表）
		keyProperty：主键属性（pojo）
	-->
	<insert id="insertUser2" parameterType="com.moon.entity.User" useGeneratedKeys="true"
		keyColumn="id" keyProperty="id">
		insert into user(username,birthday,address) values(#{username},#{birthday},#{address})
	</insert>
	

	<!-- 删除功能<delete>标签
		根据id删除用户，需要输入ID值
	 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id=#{id}
	</delete>

	<!-- 更新功能<update>标签
		分析：
		需要传入客户的id，和客户的更新信息
		parameterType指定user对象，包括id和更新的信息，注意：id必须存在
		#{id}：从输入user对象获取id属性值
	 -->
	 <update id="updateUser" parameterType="com.moon.entity.User">
	 	update user set username=#{username},address=#{address} where id=#{id}
	 </update>
</mapper>
