<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- MyBatis 的配置文件示例（继续完善） -->

<!-- 配置 -->
<configuration>
    <!-- 属性配置：
        可以在外部进行配置，并可以进行动态替换。
        既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。
        设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如 value="${driver}"
     -->
    <!-- 读取外部配置 -->
    <properties resource="org/mybatis/example/config.properties">
        <!-- 子元素中设置相应的属性值（可选） -->
        <property name="username" value="dev_user"/>
        <property name="password" value="F2Fa3!33TYyg"/>
    </properties>

    <!-- 设置（settings）
        这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。
     -->
    <settings>
        <!--全局开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为true-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置
            fetchType属性来覆盖该项的开关状态。默认值为false -->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!--当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载,默认值false-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--是否允许单一语句返回多结果集,默认值为true -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名,默认值为true -->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动兼容,默认值为false -->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL
            只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集
            （无论是否嵌套）,默认值为PARTIAL-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应；
            ARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior'
            的日志等级必须设置为 WARN)；FAILING: 映射失败 (抛出 SqlSessionException)，默认值为NONE -->
        <setting name="autoMappingUnknownColumnBehavior" value="NONE"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）；
            BATCH 执行器将重用语句并执行批量更新。默认值为SIMPLE -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。参数为任意正整数，未设置默认值-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。参数为任意正整数，
            未设置默认值 -->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false，默认值未false -->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。默认值为true -->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java
            属性名 aColumn 的类似映射,默认值为false -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
         默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语
         句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情
        况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。默认值为OTHER -->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。 -->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--指定动态 SQL 生成的默认语言。-->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或
        null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="false"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的
            结果集 (i.e. collectioin and association)。（从3.4.2开始-->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!--指定 MyBatis 增加到日志名称的前缀
        <setting name="logPrefix" value="log"/>-->
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动按顺序逐个查找，
            有效值为：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING。-->
        <setting name="logImpl" value="LOG4J"/>
        <!--指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。CGLIB | JAVASSIST-->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!-- 指定VFS的实现。值为自定义 VFS 是（多个）实现的类全限定名，以逗号分隔。
        <setting name="vfsImpl" value="vfs"/>-->
        <!--允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的工程必须采用Java 8编译，并且加上-parameters选项。
           （从3.4.1开始）-->
        <setting name="useActualParamName" value="true"/>
        <!--指定一个提供Configuration实例的类。 这个被返回的Configuration实例用来加载被反序列化对象的懒加载属性值。
            这个类必须包含一个签名方法static Configuration getConfiguration(). (从 3.2.3 版本开始)
        <setting name="configurationFactory" value="configClass"/>-->
    </settings>

    <!-- 类型别名，可为 Java 类型设置一个缩写名字 -->
    <typeAliases>
        <!-- 配置单个Java类型相应的缩写 -->
        <!--<typeAlias type="com.moon.mybatis.pojo.ConsultConfigArea" alias="Area"/>-->
        <!-- 也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，
            在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
            若有@Alias("xxx")注解，则别名为其注解值。
         -->
        <package name="com.moon.mybatis.pojo"/>
    </typeAliases>

    <!-- 类型处理器
        MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时，
        都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。
     -->
    <typeHandlers>
        <!-- 当配置package的时候，mybatis会去配置的package扫描TypeHandler，
             注意配置此标签后，不能再配置typeHandler标签
        -->
        <!--<package name="org.mybatis.example"/>-->

        <!-- handler属性直接配置要指定自定义的TypeHandler -->
        <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>
        <!-- javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 -->
        <typeHandler javaType="" handler=""/>
        <!-- jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型  -->
        <typeHandler jdbcType="" handler=""/>
        <!-- 也可两者都配置 -->
        <typeHandler javaType="" jdbcType="" handler=""/>
    </typeHandlers>

    <!-- 插件（plugins）
        MyBatis 允许在映射语句执行过程中的某一点进行拦截调用
     -->
    <plugins>
        <plugin interceptor="org.mybatis.example.ExamplePlugin">
            <property name="someProperty" value="100"/>
        </plugin>
    </plugins>

    <!-- 环境配置 -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- 在上面的配置中引用外部或者，设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值
                    从 MyBatis 3.4.2 开始，可以为占位符指定一个默认值。如下例：
                    如果属性'mybatis.driver'没有配置，则给默认值为'com.mysql.jdbc.Driver'
                 -->
                <property name="driver" value="${mybatis.driver:com.mysql.jdbc.Driver}"/>
                <property name="url" value="${mybatis.url}"/>
                <property name="username" value="${mybatis.username}"/>
                <property name="password" value="${mybatis.password}"/>
            </dataSource>
        </environment>
        <!-- 可以设置多套配置，根据default属性来选择具体使用哪一个 -->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="xxx"/>
                <property name="url" value="xx"/>
                <property name="username" value="xxxx"/>
                <property name="password" value="xxxx"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 数据库厂商标识
        MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
        MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。
        如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。
        为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
        <property name="MySQL" value="mysql" />
    </databaseIdProvider>

    <!-- 映射器 -->
    <mappers>
        <!-- 方式1：使用相对于类路径的资源引用 -->
        <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>
        <mapper resource="org/mybatis/builder/BlogMapper.xml"/>
        <mapper resource="org/mybatis/builder/PostMapper.xml"/>
        <!-- 方式2：使用完全限定资源定位符（URL） -->
        <mapper url="file:///var/mappers/AuthorMapper.xml"/>
        <mapper url="file:///var/mappers/BlogMapper.xml"/>
        <mapper url="file:///var/mappers/PostMapper.xml"/>
        <!-- 方式3：使用映射器接口实现类的完全限定类名 -->
        <mapper class="org.mybatis.builder.AuthorMapper"/>
        <mapper class="org.mybatis.builder.BlogMapper"/>
        <mapper class="org.mybatis.builder.PostMapper"/>
        <!-- 方式4：将包内的映射器接口实现全部注册为映射器 -->
        <package name="org.mybatis.builder"/>
    </mappers>
</configuration>