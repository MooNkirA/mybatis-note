<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.moon.mybatis.dao.CommonMapper">

    <!-- 启用二级缓存 -->
    <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>

    <!-- 基础结果集映射，使用类的完全限定名的方式指定type -->
    <resultMap id="ContractResultMap" type="com.moon.mybatis.pojo.ConsultContract">
        <id column="CONTRACT_ID" property="contractId"/>
        <result column="PSPTID" property="psptId"/>
        <result column="CONTRACT_CODE" property="contractCode"/>
        <result column="ACTIVETIME" property="activeTime"/>
        <result column="STATE" property="state"/>
    </resultMap>

    <!-- 基础结果集映射，使用类型别名的方式指定type -->
    <resultMap id="CardIdInfoResultMap" type="consultIdCardInfo">
        <id column="innerId" property="innerId"/>
        <result column="PSPTID" property="psptId" jdbcType="VARCHAR"/>
        <result column="NAME" property="name"/>
        <result column="Birthday" property="birthday"/>
        <result column="Sex" property="sex"/>
        <result column="Address" property="address"/>
        <result column="activeTime" property="activeTime"/>
        <result column="picture" property="picture"/>
        <result column="nation" property="nation"/>
    </resultMap>

    <!-- 结果映射（resultMap）
        association – 一个复杂类型的关联；许多结果将包装成指定的类型。
        嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用
     -->
    <resultMap id="contractResultMapAssociation" type="consultContractCardInfoWithIdCardInfo">
        <id column="CONTRACT_ID" property="contractId"/>
        <result column="CONTRACT_CODE" property="contractCode"/>
        <result column="ACTIVETIME" property="activeTime"/>
        <result column="STATE" property="state"/>
        <!-- 嵌套单个结果映射
            javaType 指定映射的类型，如果Java bean的属性与查询出来的结果字段名称一致，即可直接指定javaType（以下示例的javaType可以省略）
            resultMap 指定结果映射的引用，当前查询的结果字段与Java bean 属性不一致，使用此方法指定字段与属性的映射关系
         -->
        <association property="info" javaType="consultIdCardInfo" resultMap="CardIdInfoResultMap" />
    </resultMap>

    <!-- 结果映射（resultMap）
        collection – 一个复杂类型的集合。
        嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用
     -->
    <resultMap id="idcardinfoResultMapCollection" type="consultIdCardInfoWithContract">
        <id column="innerId" property="innerId"/>
        <result column="PSPTID" property="psptId" jdbcType="VARCHAR"/>
        <result column="NAME" property="name"/>
        <result column="Birthday" property="birthday"/>
        <result column="Sex" property="sex"/>
        <result column="Address" property="address"/>
        <result column="activeTime" property="activeTime"/>
        <result column="picture" property="picture"/>
        <result column="nation" property="nation"/>
        <!-- 嵌套多个结果映射
            javaType 指定映射的类型，因为是多个结果，所以需要指定为List类型
            resultMap 指定结果映射的引用，当前查询的结果字段与Java bean 属性不一致，使用此方法指定字段与属性的映射关系
         -->
        <collection property="consultContractList" javaType="java.util.List" resultMap="ContractResultMap"/>
    </resultMap>

    <!-- resultMap 子标签 collection 使用 select 与 column 属性进行嵌套查询 -->
    <resultMap id="ContractResultMapWithIdCardInfo" type="com.moon.mybatis.pojo.ConsultContractCardInfo">
        <id column="CONTRACT_ID" property="contractId"/>
        <result column="PSPTID" property="psptId"/>
        <result column="CONTRACT_CODE" property="contractCode"/>
        <result column="ACTIVETIME" property="activeTime"/>
        <result column="STATE" property="state"/>
        <!-- 关联的嵌套 Select 查询
            column：数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。
                    注意：在使用复合主键的时候，你可以使用 column="{prop1=col1,prop2=col2}"
                    这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。
            select：用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。
                    注意：在使用复合主键的时候，你可以使用 column="{prop1=col1,prop2=col2}" 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。
                    这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。
         -->
        <collection property="infos" javaType="java.util.List" column="PSPTID" select="queryUserByPsptId"/>
    </resultMap>

    <!-- ******************************* databaseId 配置示例 start ********************************************** -->
    <!-- sql标签与select、insert、update、delete这四类标签，均可以配置databaseId属性，
        就会判断配置的databaseId是否与当前数据库厂商标识databaseId是否匹配。
        如匹配，才会解析该标签（即建立映射关系，并保存到Configuration类中）
     -->
    <sql id="sql_databaseId_demo" databaseId="oracle">
        a,b,c
    </sql>

    <select id="select_databaseId_demo" databaseId="oracle">
        select
        <include refid="sql_databaseId_demo"/>
        from table_abc
    </select>
    <!-- *******************************  databaseId 配置示例 end  ********************************************** -->

    <!-- resultMap映射，返回多个数据
        设置 flushCache="true"，关闭此查询语句的一级缓存
        当此命名空间开启了二级缓存，设置 useCache="false"，关闭此查询语句的二级缓存
     -->
    <select id="queryContracts" resultMap="ContractResultMap">
        select * from consult_contract
    </select>

    <!-- 连表查询单条数据，使用 association 复杂类型的关联 -->
    <select id="queryContractOnebyCardId" resultMap="contractResultMapAssociation">
        select *
        from consult_contract a
        join consult_idcardinfo b on a.psptId = b.psptId limit 1
    </select>

    <!-- 连表查询多条数据，使用 collection 复杂类型的集合 -->
    <select id="queryIdcardinfobyCardId" resultMap="idcardinfoResultMapCollection">
        SELECT *
        FROM consult_idcardinfo a
        JOIN consult_contract b ON a.psptId = b.psptId
        WHERE a.psptId = #{psptId}
    </select>

    <!-- 单表查询，使用 collection 标签 select 属性进行嵌套查询 -->
    <select id="queryAllConsultContract" resultMap="ContractResultMapWithIdCardInfo">
        SELECT * FROM consult_contract
    </select>

    <!-- 单表查询，用于测试 collection 标签 select 属性的嵌套查询 -->
    <select id="queryUserByPsptId" parameterType="java.util.Map" resultMap="CardIdInfoResultMap">
        select * from consult_idcardinfo where psptId = #{psptId,jdbcType=VARCHAR}
    </select>

    <!-- 方法参数为Map形式传入 -->
    <select id="queryUserByPsptIdMap" parameterType="java.util.Map" resultType="java.util.Map">
        select *,date_format(birthday,'%Y-%m-%d') birthday1,date_format(activeTime,'%Y-%m-%d') activeTime1
        from consult_idcardinfo
        where psptId = #{psptId,jdbcType=VARCHAR}
    </select>

    <!-- 方法参数为@Param注解形式传入 -->
    <select id="queryUserByPsptIdParam" resultType="java.util.Map">
        select *,date_format(birthday,'%Y-%m-%d') birthday1,date_format(activeTime,'%Y-%m-%d') activeTime1
        from consult_idcardinfo
        where psptId = #{psptId,jdbcType=VARCHAR}
    </select>

    <!-- 方法参数为对象形式传入 -->
    <select id="queryUserByPsptIdObj" parameterType="consultIdCardInfo" resultType="java.util.Map">
        select *,date_format(birthday,'%Y-%m-%d') birthday1,date_format(activeTime,'%Y-%m-%d') activeTime1
        from consult_idcardinfo
        where psptId = #{psptId,jdbcType=VARCHAR}
    </select>

    <!-- 处理主键的生成的方式1：
            useGeneratedKeys="true",使用数据库的主键生成策略，默认值是true
            keyColumn：主键字段（表）
            keyProperty：主键属性（pojo）
	 -->
    <insert id="saveContractUseGeneratedKeys" useGeneratedKeys="true" keyProperty="contractId">
        insert into consult_contract(psptId,contract_code,state,activeTime)
        values(#{contract.psptId},#{contract.contractCode},#{contract.state},#{contract.activeTime})
    </insert>

    <!-- 处理主键的生成的方式2：使用<selectKey>内嵌标签
            select LAST_INSERT_ID()：得到刚刚insert操作添加的记录的主键，只适用与自增主键

            keyColumn属性：主键字段名（表）
            keyProperty属性：将查询到主键值设置到parameterType指定的对象的哪一个属性中
            order属性：指定select LAST_INSERT_ID()执行顺序，相对于insert语句来说的执行顺序
                BEFORE：在insert语句执行之前；
                AFTER：在insert语句执行之后；
            resultType属性：指定select LAST_INSERT_ID()的结果类型

                oracle数据库中使用BEFORE:
                    <selectKey keyColumn="id" keyProperty="id" resultType="int" order="BEFORE">
                        select seq.nextVal from dual;
                     </selectKey>
                    insert into `user`(id,username,birthday,sex,address)
                    values(#{id},#{username},#{birthday},#{sex},#{address})
	 -->
    <insert id="saveContractUseSelectKey">
        <selectKey keyProperty="contractId" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into consult_contract(psptId,contract_code,state,activeTime)
        values(#{contract.psptId},#{contract.contractCode},#{contract.state},#{contract.activeTime})
    </insert>

    <!-- 动态sql <foreach>标签拼接sql批量新增 -->
    <insert id="saveContracts" parameterType="java.util.List">
        insert into consult_contract(psptId,contract_code,state,activeTime)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.psptId},#{item.contractCode},#{item.state},#{item.activeTime})
        </foreach>
    </insert>

    <!-- 动态sql <foreach>标签拼接sql批量新增 -->
    <insert id="saveContract" parameterType="consultContract">
        insert into consult_contract(psptId,contract_code,state,activeTime)
        values(#{psptId},#{contractCode},#{state},#{activeTime})
    </insert>

</mapper>